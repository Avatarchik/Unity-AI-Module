// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;

public class AIActorPatrol : AIActor
{
	public float patrolSpeed = 2f;							// The nav mesh agent's speed when patrolling.
	public float chaseSpeed = 5f;							// The nav mesh agent's speed when chasing.
	public float chaseWaitTime = 5f;						// The amount of time to wait when the last sighting is reached.
	public float patrolWaitTime = 1f;						// The amount of time to wait when the patrol way point is reached.
	public Transform[] patrolWayPoints;						// An array of transforms for the patrol route.

	private AIManager aiManager;							// Reference to the AIManager
	private EnemySight enemySight;							// Reference to the EnemySight script.
	private NavMeshAgent nav;								// Reference to the nav mesh agent.
	private LastPlayerSighting lastPlayerSighting;			// Reference to the last global sighting of the player.
	private float chaseTimer;								// A timer for the chaseWaitTime.
	private float patrolTimer;								// A timer for the patrolWaitTime.
	private int wayPointIndex;								// A counter for the way point array.
	private HashIDs hash;									// Reference to the HashIDs.
	private bool enemyDead;

	private Animator anim;

	private AICharacter m_character;

	public void Awake ()
	{
		// Setting up the references.
		enemySight = GetComponent<EnemySight>();
		nav = GetComponent<NavMeshAgent>();
		lastPlayerSighting = GameObject.FindGameObjectWithTag(Tags.gameController).GetComponent<LastPlayerSighting>();
		anim = GetComponent<Animator>();
		hash = GameObject.FindGameObjectWithTag(Tags.gameController).GetComponent<HashIDs>();
		enemyDead = false;
		aiManager = GameObject.FindGameObjectWithTag(Tags.gameController).GetComponent<AIManager>();
	}

	public override void Execute(AIAction action)
	{
		if(enemyDead)
		{
			EnemyDead();
			return;
		}
		//Debug.Log("Doing " + action.Description);

		switch(action.ActionId)
		{
		case AIAgentManager.ActionId.Shoot:
			Shoot(action);
			break;

		case AIAgentManager.ActionId.Chase:
			Chase(action);
			break;

		case AIAgentManager.ActionId.Flee:
			Flee(action);
			break;

		case AIAgentManager.ActionId.Die:
			Die(action);
			break;

		default:
			Patrol(action);
			break;
		}
	}

	private void Shoot(AIAction action)
	{
		/*for(int i=0; i<action.Arguments.Length; ++i)
		{
			Debug.Log(action.Arguments[i]);
		}*/

		// Stop the enemy where it is.
		nav.Stop();
	}

	private void Chase(AIAction action)
	{
		Vector3 sightingDeltaPos = enemySight.personalLastSighting - transform.position;
		
		// If the the last personal sighting of the player is not close...
		if(sightingDeltaPos.sqrMagnitude > 4f)
			// ... set the destination for the NavMeshAgent to the last personal sighting of the player.
			nav.destination = enemySight.personalLastSighting;
		
		// Set the appropriate speed for the NavMeshAgent.
		nav.speed = chaseSpeed;
		
		// If near the last personal sighting...
		if(nav.remainingDistance < nav.stoppingDistance)
		{
			// ... increment the timer.
			chaseTimer += Time.deltaTime;
			
			// If the timer exceeds the wait time...
			if(chaseTimer >= chaseWaitTime)
			{
				// ... reset last global sighting, the last personal sighting and the timer.
				lastPlayerSighting.position = lastPlayerSighting.resetPosition;
				enemySight.personalLastSighting = lastPlayerSighting.resetPosition;
				chaseTimer = 0f;
			}
		}
		else
			// If not near the last sighting personal sighting of the player, reset the timer.
			chaseTimer = 0f;
	}

	private void Patrol(AIAction action)
	{
		// Set an appropriate speed for the NavMeshAgent.
		nav.speed = patrolSpeed;
		
		// If near the next waypoint or there is no destination...
		if(nav.destination == lastPlayerSighting.resetPosition || nav.remainingDistance < nav.stoppingDistance)
		{
			// ... increment the timer.
			patrolTimer += Time.deltaTime;
			
			// If the timer exceeds the wait time...
			if(patrolTimer >= patrolWaitTime)
			{
				// ... increment the wayPointIndex.
				if(wayPointIndex == patrolWayPoints.Length - 1)
					wayPointIndex = 0;
				else
					wayPointIndex++;
				
				// Reset the timer.
				patrolTimer = 0;
			}
		}
		else
			// If not near a destination, reset the timer.
			patrolTimer = 0;
		
		// Set the destination to the patrolWayPoint.
		nav.destination = patrolWayPoints[wayPointIndex].position;
	}

	private void Flee(AIAction action)
	{
		//Debug.Log("Fleeing to " + action.Arguments[0]);

		// ... set the destination for the NavMeshAgent to the last personal sighting of the player.
		nav.destination = (Vector3)(action.Arguments[0]);
		
		// Set the appropriate speed for the NavMeshAgent.
		nav.speed = chaseSpeed;
	}

	private void Die(AIAction action)
	{
		anim.SetBool(hash.deadBool,true);
		enemyDead = true;

		Debug.Log("Enemy Dying.");
	}

	private void EnemyDead ()
	{
		// If the player is in the dying state then reset the dead parameter.
		anim.SetBool(hash.deadBool, false);

		aiManager.GetAgentWithId(gameObject.GetComponent<AICharacter>().Id).Active = false;

		Debug.Log("Enemy Dead.");
	}
}

