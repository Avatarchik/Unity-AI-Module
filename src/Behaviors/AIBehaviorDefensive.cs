// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class AIBehaviorDefensive : AIBehavior
{
	private EnemySight enemySight;							// Reference to the EnemySight script.
	private PlayerHealth playerHealth;						// Reference to the PlayerHealth script.
	private LastPlayerSighting lastPlayerSighting;			// Reference to the last global sighting of the player.
	private Transform player;								// Reference to the player's transform.
	private List<Transform> targets;						// Stores all other enemies for distance calculation
	private AICharacter m_character;							// Reference to AICharacter using this behavior
	private Vector3 characterPosition;					// Reference to this characters transform
	private Transform selectedTarget;
	private Vector3 fleeingDist;

	public AIBehaviorDefensive (AICharacter character)
	{
		m_character = character;
		enemySight = character.gameObject.GetComponent<EnemySight>();
		player = GameObject.FindGameObjectWithTag(Tags.player).transform;
		playerHealth = player.GetComponent<PlayerHealth>();
		lastPlayerSighting = GameObject.FindGameObjectWithTag(Tags.gameController).GetComponent<LastPlayerSighting>();
	}

	public override void Init()
	{
		selectedTarget = null;
		FindAllTargets();
	}

	private void FindAllTargets()
	{
		GameObject[] go = GameObject.FindGameObjectsWithTag("Enemy");
		targets = new List<Transform>();
		
		foreach(GameObject enemy in go)
		{
			if(enemy != m_character.gameObject)
				targets.Add(enemy.transform);
		}
	}

	private void SortTargets()
	{
		targets.Sort(delegate(Transform t1, Transform t2){
			return Vector3.Distance(t1.position, characterPosition).CompareTo(Vector3.Distance(t2.position, characterPosition));
		});
	}

	private bool FindNearestTarget()
	{
		characterPosition = m_character.gameObject.transform.position;

		if(selectedTarget == null)
		{
			SortTargets();
			selectedTarget = targets[0];
		}

		fleeingDist = selectedTarget.position - characterPosition;
		if(fleeingDist.sqrMagnitude < 10f)
		{
			selectedTarget = null;
			enemySight.playerInSight = true;
			lastPlayerSighting.position = enemySight.personalLastSighting;
			return false;
		}
		
		return true;
	}
	
	public override AIAction MakeDecision()
	{
		// If the player is in sight and is alive...
		//if(enemySight.playerInSight && playerHealth.health > 0f)
			// ... shoot.
		//	return new AIAction(AIAgentManager.ActionId.Shoot, "Shoot in tha face", "someParam");// Shooting();

		if(enemySight.personalLastSighting != lastPlayerSighting.resetPosition && playerHealth.health > 0f && FindNearestTarget() && (selectedTarget != null))
			return new AIAction(AIAgentManager.ActionId.Flee, "Flee", selectedTarget.position);

		// If the player has been sighted and isn't dead...
		else if(enemySight.personalLastSighting != lastPlayerSighting.resetPosition && playerHealth.health > 0f)
			// ... chase.
			return new AIAction(AIAgentManager.ActionId.Chase, "Chase");
		
		// Otherwise...
		else
			// ... patrol.
			return new AIAction(AIAgentManager.ActionId.Patrol, "Patrol");
	}
}
